AWSTemplateFormatVersion: 2010-09-09
Description: Resoto Access

Parameters:
  ResotoAccountID:
    Description: The Account ID where Resoto has been deployed
    Type: Number
  RoleName:
    Description: The name of the role Resoto uses to run and collect resources
    Type: String
    Default: ResotoAccess

Outputs:
  ResotoAccessRoleName:
    Description: Name of the Resoto Access Role
    Value: !GetAtt ResotoAccessRoleNameFunction.role_name
  ResotoAccessRoleArn:
    Description: ARN of the Resoto Access Role
    Value: !GetAtt CrossAccountAccessRoleForResoto.Arn

Resources:
  ResotoRoleExistsCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import urllib3
          import json
          import secrets
          import boto3
          from botocore.exceptions import ClientError
          http = urllib3.PoolManager()
          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event["ResponseURL"]
              responseBody = {}
              responseBody["Status"] = responseStatus
              responseBody["Reason"] = "See the details in CloudWatch Log Stream: " + context.log_stream_name
              responseBody["PhysicalResourceId"] = physicalResourceId or context.log_stream_name
              responseBody["StackId"] = event["StackId"]
              responseBody["RequestId"] = event["RequestId"]
              responseBody["LogicalResourceId"] = event["LogicalResourceId"]
              responseBody["NoEcho"] = noEcho
              responseBody["Data"] = responseData
              json_response_body = json.dumps(responseBody)
              headers = {"Content-Type": "", "Content-Length": str(len(json_response_body))}
              try:
                  response = http.request("PUT", responseUrl, body=json_response_body.encode("utf-8"), headers=headers)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))
          def resoto_role_check(event, context):
              response_data = {}
              if event.get("RequestType") == "Delete":
                  send(event, context, "SUCCESS", response_data)
                  return
              try:
                  iam = boto3.client("iam")
                  role_name = event["ResourceProperties"]["RoleName"]
                  try:
                      iam.get_role(RoleName=role_name)
                      print(f"Role {role_name} already exists - generating new role name")
                      response_data["role_name"] = f"{role_name}-{secrets.token_hex(6)}"
                  except ClientError as e:
                      if e.response["Error"]["Code"] == "NoSuchEntity":
                          print(f"Role {role_name} does not exist - keeping provided role name")
                          response_data["role_name"] = role_name
                      else:
                          raise e
              except Exception as e:
                  print("resoto_role_check(..) failed: " + str(e))
                  send(event, context, "FAILED", response_data)
                  return
              send(event, context, "SUCCESS", response_data)
      Handler: index.resoto_role_check
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt ResotoRoleExistsCheckExecutionRole.Arn

  ResotoRoleExistsCheckExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: ResotoRoleExistsCheckExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: 'arn:aws:logs:*:*:*'
          - Effect: Allow
            Action: iam:GetRole
            Resource: '*'

  ResotoAccessRoleNameFunction:
    Type: Custom::Function
    Properties:
      RoleName: !Ref RoleName
      ServiceToken: !GetAtt ResotoRoleExistsCheckFunction.Arn

  CrossAccountAccessRoleForResoto:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !GetAtt ResotoAccessRoleNameFunction.role_name
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join ['', ['arn:aws:iam::', !Ref ResotoAccountID, ':root']]
          Action:
          - 'sts:AssumeRole'
          - 'sts:TagSession'
      Policies:
      - PolicyName: 'ResotoOrgList'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Resource: '*'
            Action:
            - organizations:ListAccounts
            - ec2:DescribeRegions
            - iam:ListAccountAliases
      - PolicyName: ResotoCollect
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - apigateway:GET
            - athena:GetDataCatalog
            - athena:GetWorkGroup
            - athena:ListDataCatalogs
            - athena:ListTagsForResource
            - athena:ListWorkGroups
            - autoscaling:DescribeAutoScalingGroups
            - cloudformation:DescribeStacks
            - cloudformation:ListStackInstances
            - cloudformation:ListStackSets
            - cloudwatch:DescribeAlarms
            - cognito-idp:ListGroups
            - cognito-idp:ListTagsForResource
            - cognito-idp:ListUserPools
            - cognito-idp:ListUsers
            - dynamodb:DescribeGlobalTable
            - dynamodb:DescribeTable
            - dynamodb:ListGlobalTables
            - dynamodb:ListTables
            - dynamodb:ListTagsOfResource
            - ec2:DescribeAddresses
            - ec2:DescribeHosts
            - ec2:DescribeInstanceTypes
            - ec2:DescribeInstances
            - ec2:DescribeInternetGateways
            - ec2:DescribeKeyPairs
            - ec2:DescribeNatGateways
            - ec2:DescribeNetworkAcls
            - ec2:DescribeNetworkInterfaces
            - ec2:DescribeRegions
            - ec2:DescribeReservedInstances
            - ec2:DescribeRouteTables
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSnapshots
            - ec2:DescribeSubnets
            - ec2:DescribeVolumes
            - ec2:DescribeVpcEndpoints
            - ec2:DescribeVpcPeeringConnections
            - ec2:DescribeVpcs
            - ecs:DescribeCapacityProviders
            - ecs:DescribeClusters
            - ecs:DescribeContainerInstances
            - ecs:DescribeServices
            - ecs:DescribeTaskDefinition
            - ecs:DescribeTasks
            - ecs:ListClusters
            - ecs:ListContainerInstances
            - ecs:ListServices
            - ecs:ListTaskDefinitions
            - ecs:ListTasks
            - eks:DescribeCluster
            - eks:DescribeNodegroup
            - eks:ListClusters
            - eks:ListNodegroups
            - elasticache:DescribeCacheClusters
            - elasticache:DescribeReplicationGroups
            - elasticache:ListTagsForResource
            - elasticbeanstalk:DescribeApplications
            - elasticbeanstalk:DescribeEnvironmentResources
            - elasticbeanstalk:DescribeEnvironments
            - elasticbeanstalk:ListTagsForResource
            - elasticloadbalancing:DescribeListeners
            - elasticloadbalancing:DescribeLoadBalancers
            - elasticloadbalancing:DescribeTags
            - elasticloadbalancing:DescribeTargetGroups
            - elasticloadbalancing:DescribeTargetHealth
            - glacier:ListJobs
            - glacier:ListTagsForVault
            - glacier:ListVaults
            - iam:GetAccessKeyLastUsed
            - iam:GetAccountAuthorizationDetails
            - iam:GetAccountPasswordPolicy
            - iam:GetAccountSummary
            - iam:ListAccessKeys
            - iam:ListAccountAliases
            - iam:ListInstanceProfiles
            - iam:ListServerCertificates
            - iam:ListUsers
            - kinesis:DescribeStream
            - kinesis:ListStreams
            - kinesis:ListTagsForStream
            - kms:DescribeKey
            - kms:ListKeys
            - kms:ListResourceTags
            - lambda:GetPolicy
            - lambda:ListFunctions
            - lambda:ListTags
            - organizations:ListAccounts
            - pricing:GetProducts
            - rds:DescribeDbInstances
            - rds:ListTagsForResource
            - redshift:DescribeClusters
            - route53:ListHostedZones
            - route53:ListResourceRecordSets
            - route53:ListTagsForResource
            - s3:GetBucketTagging
            - s3:ListAllMyBuckets
            - servicequotas:ListServiceQuotas
            - sns:GetPlatformApplicationAttributes
            - sns:GetSubscriptionAttributes
            - sns:GetTopicAttributes
            - sns:ListEndpointsByPlatformApplication
            - sns:ListPlatformApplications
            - sns:ListSubscriptions
            - sns:ListTagsForResource
            - sns:ListTopics
            - sqs:GetQueueAttributes
            - sqs:ListQueueTags
            - sqs:ListQueues
      - PolicyName: ResotoMutate
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - apigateway:DELETE
            - apigateway:PATCH
            - apigateway:POST
            - apigateway:PUT
            - athena:DeleteDataCatalog
            - athena:DeleteWorkGroup
            - athena:TagResource
            - athena:UntagResource
            - autoscaling:CreateOrUpdateTags
            - autoscaling:DeleteAutoScalingGroup
            - autoscaling:DeleteTags
            - cloudformation:DeleteStack
            - cloudformation:DeleteStackSet
            - cloudformation:UpdateStack
            - cloudformation:UpdateStackSet
            - cloudwatch:DeleteAlarms
            - cloudwatch:TagResource
            - cloudwatch:UntagResource
            - cognito-idp:DeleteGroup
            - cognito-idp:DeleteUserPool
            - cognito-idp:TagResource
            - cognito-idp:UntagResource
            - dynamodb:DeleteTable
            - dynamodb:TagResource
            - dynamodb:UntagResource
            - ec2:CreateTags
            - ec2:DeleteInternetGateway
            - ec2:DeleteKeyPair
            - ec2:DeleteNatGateway
            - ec2:DeleteNetworkAcl
            - ec2:DeleteNetworkInterface
            - ec2:DeleteRouteTable
            - ec2:DeleteSecurityGroup
            - ec2:DeleteSnapshot
            - ec2:DeleteSubnet
            - ec2:DeleteTags
            - ec2:DeleteVolume
            - ec2:DeleteVpc
            - ec2:DeleteVpcEndpoints
            - ec2:DeleteVpcPeeringConnection
            - ec2:DetachInternetGateway
            - ec2:DisassociateAddress
            - ec2:DisassociateRouteTable
            - ec2:ReleaseAddress
            - ec2:ReleaseHosts
            - ec2:RevokeSecurityGroupEgress
            - ec2:RevokeSecurityGroupIngress
            - ec2:StartInstances
            - ec2:StopInstances
            - ec2:TerminateInstances
            - ecs:DeleteCapacityProvider
            - ecs:DeleteCluster
            - ecs:DeleteService
            - ecs:DeregisterContainerInstance
            - ecs:DeregisterTaskDefinition
            - ecs:PutClusterCapacityProviders
            - ecs:StopTask
            - ecs:TagResource
            - ecs:UntagResource
            - ecs:UpdateService
            - eks:DeleteCluster
            - eks:DeleteNodegroup
            - eks:TagResource
            - eks:UntagResource
            - elasticache:AddTagsToResource
            - elasticache:DeleteCacheCluster
            - elasticache:DeleteReplicationGroup
            - elasticache:RemoveTagsFromResource
            - elasticbeanstalk:DeleteApplication
            - elasticbeanstalk:TerminateEnvironment
            - elasticbeanstalk:UpdateTagsForResource
            - elasticloadbalancing:AddTags
            - elasticloadbalancing:DeleteLoadBalancer
            - elasticloadbalancing:DeleteTargetGroup
            - elasticloadbalancing:RemoveTags
            - glacier:AddTagsToVault
            - glacier:DeleteVault
            - glacier:RemoveTagsFromVault
            - iam:DeleteGroup
            - iam:DeleteGroupPolicy
            - iam:DeleteInstanceProfile
            - iam:DeletePolicy
            - iam:DeleteRole
            - iam:DeleteRolePolicy
            - iam:DeleteServerCertificate
            - iam:DeleteUser
            - iam:DeleteUserPolicy
            - iam:DetachGroupPolicy
            - iam:DetachRolePolicy
            - iam:DetachUserPolicy
            - iam:RemoveRoleFromInstanceProfile
            - iam:TagInstanceProfile
            - iam:TagPolicy
            - iam:TagRole
            - iam:TagServerCertificate
            - iam:TagUser
            - iam:UntagInstanceProfile
            - iam:UntagPolicy
            - iam:UntagRole
            - iam:UntagServerCertificate
            - iam:UntagUser
            - kinesis:AddTagsToStream
            - kinesis:DeleteStream
            - kinesis:RemoveTagsFromStream
            - kms:DisableKey
            - kms:ScheduleKeyDeletion
            - kms:TagResource
            - kms:UntagResource
            - lambda:DeleteFunction
            - lambda:TagResource
            - lambda:UntagResource
            - rds:AddTagsToResource
            - rds:DeleteDbInstance
            - rds:RemoveTagsFromResource
            - redshift:CreateTags
            - redshift:DeleteCluster
            - redshift:DeleteTags
            - route53:ChangeTagsForResource
            - route53:DeleteHostedZone
            - s3:DeleteBucket
            - s3:DeleteObject
            - s3:PutBucketTagging
            - servicequotas:TagResource
            - servicequotas:UntagResource
            - sns:DeleteEndpoint
            - sns:DeletePlatformApplication
            - sns:DeleteTopic
            - sns:TagResource
            - sns:Unsubscribe
            - sns:UntagResource
            - sqs:DeleteQueue
            - sqs:TagQueue
            - sqs:UntagQueue
